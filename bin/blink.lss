
bin/blink.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000e1 	.word	0x000000e1
   c:	000000e3 	.word	0x000000e3
	...
  2c:	000000e5 	.word	0x000000e5
	...
  38:	000000e7 	.word	0x000000e7
  3c:	00000299 	.word	0x00000299
  40:	000000eb 	.word	0x000000eb
  44:	000000eb 	.word	0x000000eb
  48:	000000eb 	.word	0x000000eb
  4c:	000000eb 	.word	0x000000eb
  50:	000000eb 	.word	0x000000eb
  54:	000000eb 	.word	0x000000eb
  58:	000000eb 	.word	0x000000eb
  5c:	000000eb 	.word	0x000000eb
  60:	000000eb 	.word	0x000000eb
  64:	000000eb 	.word	0x000000eb
  68:	000000eb 	.word	0x000000eb
  6c:	000000eb 	.word	0x000000eb
  70:	000000eb 	.word	0x000000eb
  74:	0000057d 	.word	0x0000057d
  78:	000000eb 	.word	0x000000eb
  7c:	000000eb 	.word	0x000000eb
  80:	000000eb 	.word	0x000000eb
  84:	000000eb 	.word	0x000000eb
  88:	000000eb 	.word	0x000000eb
  8c:	000000eb 	.word	0x000000eb
  90:	000000eb 	.word	0x000000eb
  94:	000000eb 	.word	0x000000eb
	...
  a0:	000000eb 	.word	0x000000eb
  a4:	000000eb 	.word	0x000000eb
  a8:	000000eb 	.word	0x000000eb
  ac:	00000000 	.word	0x00000000
  b0:	000000eb 	.word	0x000000eb
  b4:	000000eb 	.word	0x000000eb
  b8:	000000eb 	.word	0x000000eb
  bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
  c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
  c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)
  c4:	2000      	movs	r0, #0
  c6:	1a52      	subs	r2, r2, r1
  c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>
  ca:	3a04      	subs	r2, #4
  cc:	5088      	str	r0, [r1, r2]
  ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
  d0:	f000 f98c 	bl	3ec <SystemInit>
  d4:	f000 f8e8 	bl	2a8 <main>
  d8:	10000108 	.word	0x10000108
  dc:	10000308 	.word	0x10000308

000000e0 <NMI_Handler>:
  e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
  e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
  e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
  e6:	e7fe      	b.n	e6 <PendSV_Handler>
  e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
  ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <SystemCoreClockUpdate>:
  ec:	b510      	push	{r4, lr}
  ee:	f000 f847 	bl	180 <Chip_Clock_GetSystemClockRate>
  f2:	4b01      	ldr	r3, [pc, #4]	; (f8 <SystemCoreClockUpdate+0xc>)
  f4:	6018      	str	r0, [r3, #0]
  f6:	bd10      	pop	{r4, pc}
  f8:	10000100 	.word	0x10000100

000000fc <Chip_Clock_GetMainClockRate>:
  fc:	2103      	movs	r1, #3
  fe:	b500      	push	{lr}
 100:	4a1b      	ldr	r2, [pc, #108]	; (170 <Chip_Clock_GetMainClockRate+0x74>)
 102:	b083      	sub	sp, #12
 104:	6f13      	ldr	r3, [r2, #112]	; 0x70
 106:	400b      	ands	r3, r1
 108:	2b02      	cmp	r3, #2
 10a:	d01c      	beq.n	146 <Chip_Clock_GetMainClockRate+0x4a>
 10c:	2b03      	cmp	r3, #3
 10e:	d00c      	beq.n	12a <Chip_Clock_GetMainClockRate+0x2e>
 110:	2b01      	cmp	r3, #1
 112:	d002      	beq.n	11a <Chip_Clock_GetMainClockRate+0x1e>
 114:	4817      	ldr	r0, [pc, #92]	; (174 <Chip_Clock_GetMainClockRate+0x78>)
 116:	b003      	add	sp, #12
 118:	bd00      	pop	{pc}
 11a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 11c:	4019      	ands	r1, r3
 11e:	d0f9      	beq.n	114 <Chip_Clock_GetMainClockRate+0x18>
 120:	2901      	cmp	r1, #1
 122:	d123      	bne.n	16c <Chip_Clock_GetMainClockRate+0x70>
 124:	4b14      	ldr	r3, [pc, #80]	; (178 <Chip_Clock_GetMainClockRate+0x7c>)
 126:	6818      	ldr	r0, [r3, #0]
 128:	e7f5      	b.n	116 <Chip_Clock_GetMainClockRate+0x1a>
 12a:	6891      	ldr	r1, [r2, #8]
 12c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 12e:	4013      	ands	r3, r2
 130:	d016      	beq.n	160 <Chip_Clock_GetMainClockRate+0x64>
 132:	2b01      	cmp	r3, #1
 134:	d11a      	bne.n	16c <Chip_Clock_GetMainClockRate+0x70>
 136:	201f      	movs	r0, #31
 138:	4b0f      	ldr	r3, [pc, #60]	; (178 <Chip_Clock_GetMainClockRate+0x7c>)
 13a:	4008      	ands	r0, r1
 13c:	681b      	ldr	r3, [r3, #0]
 13e:	3001      	adds	r0, #1
 140:	9301      	str	r3, [sp, #4]
 142:	4358      	muls	r0, r3
 144:	e7e7      	b.n	116 <Chip_Clock_GetMainClockRate+0x1a>
 146:	211f      	movs	r1, #31
 148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 14a:	05d3      	lsls	r3, r2, #23
 14c:	4011      	ands	r1, r2
 14e:	0f1b      	lsrs	r3, r3, #28
 150:	4a0a      	ldr	r2, [pc, #40]	; (17c <Chip_Clock_GetMainClockRate+0x80>)
 152:	009b      	lsls	r3, r3, #2
 154:	3101      	adds	r1, #1
 156:	0049      	lsls	r1, r1, #1
 158:	5898      	ldr	r0, [r3, r2]
 15a:	f000 fa91 	bl	680 <__udivsi3>
 15e:	e7da      	b.n	116 <Chip_Clock_GetMainClockRate+0x1a>
 160:	231f      	movs	r3, #31
 162:	4804      	ldr	r0, [pc, #16]	; (174 <Chip_Clock_GetMainClockRate+0x78>)
 164:	400b      	ands	r3, r1
 166:	3301      	adds	r3, #1
 168:	4358      	muls	r0, r3
 16a:	e7d4      	b.n	116 <Chip_Clock_GetMainClockRate+0x1a>
 16c:	2000      	movs	r0, #0
 16e:	e7d2      	b.n	116 <Chip_Clock_GetMainClockRate+0x1a>
 170:	40048000 	.word	0x40048000
 174:	00b71b00 	.word	0x00b71b00
 178:	0000085c 	.word	0x0000085c
 17c:	0000081c 	.word	0x0000081c

00000180 <Chip_Clock_GetSystemClockRate>:
 180:	b510      	push	{r4, lr}
 182:	f7ff ffbb 	bl	fc <Chip_Clock_GetMainClockRate>
 186:	4b02      	ldr	r3, [pc, #8]	; (190 <Chip_Clock_GetSystemClockRate+0x10>)
 188:	6f99      	ldr	r1, [r3, #120]	; 0x78
 18a:	f000 fa79 	bl	680 <__udivsi3>
 18e:	bd10      	pop	{r4, pc}
 190:	40048000 	.word	0x40048000

00000194 <RingBuffer_Init>:
 194:	6043      	str	r3, [r0, #4]
 196:	2300      	movs	r3, #0
 198:	6001      	str	r1, [r0, #0]
 19a:	6082      	str	r2, [r0, #8]
 19c:	6103      	str	r3, [r0, #16]
 19e:	60c3      	str	r3, [r0, #12]
 1a0:	2001      	movs	r0, #1
 1a2:	4770      	bx	lr

000001a4 <RingBuffer_Insert>:
 1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1a6:	68c2      	ldr	r2, [r0, #12]
 1a8:	6903      	ldr	r3, [r0, #16]
 1aa:	000e      	movs	r6, r1
 1ac:	6841      	ldr	r1, [r0, #4]
 1ae:	0004      	movs	r4, r0
 1b0:	1ad3      	subs	r3, r2, r3
 1b2:	2000      	movs	r0, #0
 1b4:	428b      	cmp	r3, r1
 1b6:	d20e      	bcs.n	1d6 <RingBuffer_Insert+0x32>
 1b8:	0010      	movs	r0, r2
 1ba:	f000 fae7 	bl	78c <__aeabi_uidivmod>
 1be:	68a7      	ldr	r7, [r4, #8]
 1c0:	6825      	ldr	r5, [r4, #0]
 1c2:	4379      	muls	r1, r7
 1c4:	003a      	movs	r2, r7
 1c6:	1868      	adds	r0, r5, r1
 1c8:	0031      	movs	r1, r6
 1ca:	f000 fae5 	bl	798 <memcpy>
 1ce:	2001      	movs	r0, #1
 1d0:	68e3      	ldr	r3, [r4, #12]
 1d2:	3301      	adds	r3, #1
 1d4:	60e3      	str	r3, [r4, #12]
 1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000001d8 <RingBuffer_Pop>:
 1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1da:	0004      	movs	r4, r0
 1dc:	6903      	ldr	r3, [r0, #16]
 1de:	68e2      	ldr	r2, [r4, #12]
 1e0:	000e      	movs	r6, r1
 1e2:	2000      	movs	r0, #0
 1e4:	429a      	cmp	r2, r3
 1e6:	d00f      	beq.n	208 <Stack_Size+0x8>
 1e8:	0018      	movs	r0, r3
 1ea:	6861      	ldr	r1, [r4, #4]
 1ec:	f000 face 	bl	78c <__aeabi_uidivmod>
 1f0:	68a7      	ldr	r7, [r4, #8]
 1f2:	6825      	ldr	r5, [r4, #0]
 1f4:	4379      	muls	r1, r7
 1f6:	003a      	movs	r2, r7
 1f8:	1869      	adds	r1, r5, r1
 1fa:	0030      	movs	r0, r6
 1fc:	f000 facc 	bl	798 <memcpy>
 200:	2001      	movs	r0, #1
 202:	6923      	ldr	r3, [r4, #16]
 204:	3301      	adds	r3, #1
 206:	6123      	str	r3, [r4, #16]
 208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 20a:	46c0      	nop			; (mov r8, r8)

0000020c <Chip_UART_Init>:
 20c:	2180      	movs	r1, #128	; 0x80
 20e:	2280      	movs	r2, #128	; 0x80
 210:	4b07      	ldr	r3, [pc, #28]	; (230 <Chip_UART_Init+0x24>)
 212:	b510      	push	{r4, lr}
 214:	585c      	ldr	r4, [r3, r1]
 216:	0152      	lsls	r2, r2, #5
 218:	4322      	orrs	r2, r4
 21a:	505a      	str	r2, [r3, r1]
 21c:	2298      	movs	r2, #152	; 0x98
 21e:	397f      	subs	r1, #127	; 0x7f
 220:	5099      	str	r1, [r3, r2]
 222:	2307      	movs	r3, #7
 224:	6083      	str	r3, [r0, #8]
 226:	3b04      	subs	r3, #4
 228:	60c3      	str	r3, [r0, #12]
 22a:	330d      	adds	r3, #13
 22c:	6283      	str	r3, [r0, #40]	; 0x28
 22e:	bd10      	pop	{r4, pc}
 230:	40048000 	.word	0x40048000

00000234 <Chip_UART_SendBlocking>:
 234:	b570      	push	{r4, r5, r6, lr}
 236:	2600      	movs	r6, #0
 238:	2520      	movs	r5, #32
 23a:	2a00      	cmp	r2, #0
 23c:	dd0d      	ble.n	25a <Chip_UART_SendBlocking+0x26>
 23e:	2300      	movs	r3, #0
 240:	6944      	ldr	r4, [r0, #20]
 242:	4225      	tst	r5, r4
 244:	d004      	beq.n	250 <Chip_UART_SendBlocking+0x1c>
 246:	5ccc      	ldrb	r4, [r1, r3]
 248:	3301      	adds	r3, #1
 24a:	6004      	str	r4, [r0, #0]
 24c:	429a      	cmp	r2, r3
 24e:	dcf7      	bgt.n	240 <Chip_UART_SendBlocking+0xc>
 250:	1ad2      	subs	r2, r2, r3
 252:	18f6      	adds	r6, r6, r3
 254:	18c9      	adds	r1, r1, r3
 256:	2a00      	cmp	r2, #0
 258:	dcf1      	bgt.n	23e <Chip_UART_SendBlocking+0xa>
 25a:	0030      	movs	r0, r6
 25c:	bd70      	pop	{r4, r5, r6, pc}
 25e:	46c0      	nop			; (mov r8, r8)

00000260 <Chip_UART_SetBaud>:
 260:	b570      	push	{r4, r5, r6, lr}
 262:	000e      	movs	r6, r1
 264:	0004      	movs	r4, r0
 266:	f7ff ff49 	bl	fc <Chip_Clock_GetMainClockRate>
 26a:	0131      	lsls	r1, r6, #4
 26c:	0005      	movs	r5, r0
 26e:	f000 fa07 	bl	680 <__udivsi3>
 272:	23ff      	movs	r3, #255	; 0xff
 274:	001e      	movs	r6, r3
 276:	0001      	movs	r1, r0
 278:	4006      	ands	r6, r0
 27a:	2080      	movs	r0, #128	; 0x80
 27c:	68e2      	ldr	r2, [r4, #12]
 27e:	4302      	orrs	r2, r0
 280:	60e2      	str	r2, [r4, #12]
 282:	0a0a      	lsrs	r2, r1, #8
 284:	4013      	ands	r3, r2
 286:	6026      	str	r6, [r4, #0]
 288:	6063      	str	r3, [r4, #4]
 28a:	68e3      	ldr	r3, [r4, #12]
 28c:	4383      	bics	r3, r0
 28e:	60e3      	str	r3, [r4, #12]
 290:	0028      	movs	r0, r5
 292:	f000 f9f5 	bl	680 <__udivsi3>
 296:	bd70      	pop	{r4, r5, r6, pc}

00000298 <SysTick_Handler>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

void SysTick_Handler(void) {
    msTicks++;
 298:	4a02      	ldr	r2, [pc, #8]	; (2a4 <SysTick_Handler+0xc>)
 29a:	6813      	ldr	r3, [r2, #0]
 29c:	3301      	adds	r3, #1
 29e:	6013      	str	r3, [r2, #0]
}
 2a0:	4770      	bx	lr
 2a2:	46c0      	nop			; (mov r8, r8)
 2a4:	10000150 	.word	0x10000150

000002a8 <main>:
        Chip_UART_SendBlocking(LPC_USART, str, 2);
    }
}


int main(void) {
 2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 2aa:	46de      	mov	lr, fp
 2ac:	4657      	mov	r7, sl
 2ae:	464e      	mov	r6, r9
 2b0:	4645      	mov	r5, r8
 2b2:	b5e0      	push	{r5, r6, r7, lr}
 2b4:	b083      	sub	sp, #12
	SystemCoreClockUpdate();
 2b6:	f7ff ff19 	bl	ec <SystemCoreClockUpdate>

    uint32_t reset_can_peripheral_time;
    const uint32_t can_error_delay = 5000;
    bool reset_can_peripheral = false;

	if (SysTick_Config (SystemCoreClock / 1000)) {
 2ba:	21fa      	movs	r1, #250	; 0xfa
 2bc:	4b3b      	ldr	r3, [pc, #236]	; (3ac <main+0x104>)
 2be:	0089      	lsls	r1, r1, #2
 2c0:	6818      	ldr	r0, [r3, #0]
 2c2:	f000 f9dd 	bl	680 <__udivsi3>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 2c6:	21c0      	movs	r1, #192	; 0xc0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 2c8:	4a39      	ldr	r2, [pc, #228]	; (3b0 <main+0x108>)
 2ca:	3801      	subs	r0, #1
 2cc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 2ce:	4839      	ldr	r0, [pc, #228]	; (3b4 <main+0x10c>)
 2d0:	0609      	lsls	r1, r1, #24
 2d2:	6a03      	ldr	r3, [r0, #32]
	}

	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT)); /* RXD */
	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT)); /* TXD */

	Chip_UART_Init(LPC_USART);
 2d4:	4c38      	ldr	r4, [pc, #224]	; (3b8 <main+0x110>)
 2d6:	021b      	lsls	r3, r3, #8
 2d8:	0a1b      	lsrs	r3, r3, #8
 2da:	430b      	orrs	r3, r1
 2dc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 2de:	2300      	movs	r3, #0
 2e0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 2e2:	3307      	adds	r3, #7
 2e4:	6013      	str	r3, [r2, #0]
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 2e6:	21a4      	movs	r1, #164	; 0xa4
 2e8:	2201      	movs	r2, #1
 2ea:	4b34      	ldr	r3, [pc, #208]	; (3bc <main+0x114>)
 2ec:	0020      	movs	r0, r4
 2ee:	505a      	str	r2, [r3, r1]
 2f0:	3104      	adds	r1, #4
 2f2:	505a      	str	r2, [r3, r1]
 2f4:	f7ff ff8a 	bl	20c <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, 57600);
 2f8:	21e1      	movs	r1, #225	; 0xe1
 2fa:	0020      	movs	r0, r4
 2fc:	0209      	lsls	r1, r1, #8
 2fe:	f7ff ffaf 	bl	260 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 302:	2303      	movs	r3, #3
 304:	60e3      	str	r3, [r4, #12]
	pUART->FCR = fcr;
 306:	337e      	adds	r3, #126	; 0x7e
 308:	60a3      	str	r3, [r4, #8]
	pUART->TER1 = UART_TER1_TXEN;
 30a:	3b01      	subs	r3, #1
 30c:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);

	DEBUG_Print("Started up\n\r");
 30e:	220c      	movs	r2, #12
 310:	492b      	ldr	r1, [pc, #172]	; (3c0 <main+0x118>)
 312:	0020      	movs	r0, r4
 314:	f7ff ff8e 	bl	234 <Chip_UART_SendBlocking>

	CAN_Init(500000);
 318:	482a      	ldr	r0, [pc, #168]	; (3c4 <main+0x11c>)
 31a:	f000 f939 	bl	590 <CAN_Init>
 31e:	4b2a      	ldr	r3, [pc, #168]	; (3c8 <main+0x120>)
        	}

		ret = CAN_Receive(&rx_msg);
		
		if (ret == NO_CAN_ERROR) {
			switch (rx_msg.mode_id) {
 320:	2598      	movs	r5, #152	; 0x98
 322:	469b      	mov	fp, r3
 324:	4b29      	ldr	r3, [pc, #164]	; (3cc <main+0x124>)
 326:	4c2a      	ldr	r4, [pc, #168]	; (3d0 <main+0x128>)
 328:	469a      	mov	sl, r3
 32a:	4b2a      	ldr	r3, [pc, #168]	; (3d4 <main+0x12c>)
 32c:	4f2a      	ldr	r7, [pc, #168]	; (3d8 <main+0x130>)
 32e:	4699      	mov	r9, r3
 330:	4b2a      	ldr	r3, [pc, #168]	; (3dc <main+0x134>)
 332:	4e2b      	ldr	r6, [pc, #172]	; (3e0 <main+0x138>)
 334:	4698      	mov	r8, r3
 336:	00ad      	lsls	r5, r5, #2
		ret = CAN_Receive(&rx_msg);
 338:	0020      	movs	r0, r4
 33a:	f000 f983 	bl	644 <CAN_Receive>
		if (ret == NO_CAN_ERROR) {
 33e:	2800      	cmp	r0, #0
 340:	d1fa      	bne.n	338 <main+0x90>
			switch (rx_msg.mode_id) {
 342:	6823      	ldr	r3, [r4, #0]
 344:	42ab      	cmp	r3, r5
 346:	d015      	beq.n	374 <main+0xcc>
 348:	d809      	bhi.n	35e <main+0xb6>
 34a:	2b60      	cmp	r3, #96	; 0x60
 34c:	d024      	beq.n	398 <main+0xf0>
 34e:	2b61      	cmp	r3, #97	; 0x61
 350:	d11c      	bne.n	38c <main+0xe4>
//						default:
//							//TODO
//					}
					break;
				case BMS_DISCHARGE_RESPONSE__id:
					DEBUG_Print("BMS Discharge Response\r\n");
 352:	2218      	movs	r2, #24
 354:	4651      	mov	r1, sl
 356:	4818      	ldr	r0, [pc, #96]	; (3b8 <main+0x110>)
 358:	f7ff ff6c 	bl	234 <Chip_UART_SendBlocking>
					// TODO
					break;
 35c:	e7ec      	b.n	338 <main+0x90>
			switch (rx_msg.mode_id) {
 35e:	42b3      	cmp	r3, r6
 360:	d00e      	beq.n	380 <main+0xd8>
 362:	4a20      	ldr	r2, [pc, #128]	; (3e4 <main+0x13c>)
 364:	4293      	cmp	r3, r2
 366:	d111      	bne.n	38c <main+0xe4>
				case BMS_CELL_TEMPS__id:
					DEBUG_Print("BMS Cell Temps");
					//TODO
					break;
				case BMS_ERRORS__id:
					DEBUG_Print("BMS Errors");
 368:	220a      	movs	r2, #10
 36a:	0039      	movs	r1, r7
 36c:	4812      	ldr	r0, [pc, #72]	; (3b8 <main+0x110>)
 36e:	f7ff ff61 	bl	234 <Chip_UART_SendBlocking>
					//TODO
					break;
 372:	e7e1      	b.n	338 <main+0x90>
					DEBUG_Print("BMS Pack Status");
 374:	220f      	movs	r2, #15
 376:	4649      	mov	r1, r9
 378:	480f      	ldr	r0, [pc, #60]	; (3b8 <main+0x110>)
 37a:	f7ff ff5b 	bl	234 <Chip_UART_SendBlocking>
					break;
 37e:	e7db      	b.n	338 <main+0x90>
					DEBUG_Print("BMS Cell Temps");
 380:	220e      	movs	r2, #14
 382:	4641      	mov	r1, r8
 384:	480c      	ldr	r0, [pc, #48]	; (3b8 <main+0x110>)
 386:	f7ff ff55 	bl	234 <Chip_UART_SendBlocking>
					break;
 38a:	e7d5      	b.n	338 <main+0x90>
				default:
					DEBUG_Print("Unrecognized CAN message");
 38c:	2218      	movs	r2, #24
 38e:	4916      	ldr	r1, [pc, #88]	; (3e8 <main+0x140>)
 390:	4809      	ldr	r0, [pc, #36]	; (3b8 <main+0x110>)
 392:	f7ff ff4f 	bl	234 <Chip_UART_SendBlocking>
 396:	e7cf      	b.n	338 <main+0x90>
					DEBUG_Print("BMS Heartbeat\r\n");
 398:	4659      	mov	r1, fp
 39a:	220f      	movs	r2, #15
 39c:	4806      	ldr	r0, [pc, #24]	; (3b8 <main+0x110>)
 39e:	f7ff ff49 	bl	234 <Chip_UART_SendBlocking>
					CAN_MakeBMSHeartbeat(&bms_heartbeat, &rx_msg);
 3a2:	0021      	movs	r1, r4
 3a4:	a801      	add	r0, sp, #4
 3a6:	f000 f867 	bl	478 <CAN_MakeBMSHeartbeat>
					break;
 3aa:	e7c5      	b.n	338 <main+0x90>
 3ac:	10000100 	.word	0x10000100
 3b0:	e000e010 	.word	0xe000e010
 3b4:	e000ed00 	.word	0xe000ed00
 3b8:	40008000 	.word	0x40008000
 3bc:	40044000 	.word	0x40044000
 3c0:	00000860 	.word	0x00000860
 3c4:	0007a120 	.word	0x0007a120
 3c8:	00000870 	.word	0x00000870
 3cc:	00000880 	.word	0x00000880
 3d0:	10000138 	.word	0x10000138
 3d4:	0000089c 	.word	0x0000089c
 3d8:	000008bc 	.word	0x000008bc
 3dc:	000008ac 	.word	0x000008ac
 3e0:	00000261 	.word	0x00000261
 3e4:	00000262 	.word	0x00000262
 3e8:	000008c8 	.word	0x000008c8

000003ec <SystemInit>:
 3ec:	218e      	movs	r1, #142	; 0x8e
 3ee:	2020      	movs	r0, #32
 3f0:	4b1f      	ldr	r3, [pc, #124]	; (470 <SystemInit+0x84>)
 3f2:	0089      	lsls	r1, r1, #2
 3f4:	585a      	ldr	r2, [r3, r1]
 3f6:	b510      	push	{r4, lr}
 3f8:	4382      	bics	r2, r0
 3fa:	505a      	str	r2, [r3, r1]
 3fc:	2200      	movs	r2, #0
 3fe:	621a      	str	r2, [r3, #32]
 400:	23c8      	movs	r3, #200	; 0xc8
 402:	46c0      	nop			; (mov r8, r8)
 404:	3b01      	subs	r3, #1
 406:	2b00      	cmp	r3, #0
 408:	d1fb      	bne.n	402 <SystemInit+0x16>
 40a:	2101      	movs	r1, #1
 40c:	4a18      	ldr	r2, [pc, #96]	; (470 <SystemInit+0x84>)
 40e:	6413      	str	r3, [r2, #64]	; 0x40
 410:	6451      	str	r1, [r2, #68]	; 0x44
 412:	6453      	str	r3, [r2, #68]	; 0x44
 414:	6451      	str	r1, [r2, #68]	; 0x44
 416:	6c53      	ldr	r3, [r2, #68]	; 0x44
 418:	4219      	tst	r1, r3
 41a:	d0fc      	beq.n	416 <SystemInit+0x2a>
 41c:	2361      	movs	r3, #97	; 0x61
 41e:	218e      	movs	r1, #142	; 0x8e
 420:	2080      	movs	r0, #128	; 0x80
 422:	6093      	str	r3, [r2, #8]
 424:	0089      	lsls	r1, r1, #2
 426:	5853      	ldr	r3, [r2, r1]
 428:	4383      	bics	r3, r0
 42a:	5053      	str	r3, [r2, r1]
 42c:	2101      	movs	r1, #1
 42e:	4a10      	ldr	r2, [pc, #64]	; (470 <SystemInit+0x84>)
 430:	68d3      	ldr	r3, [r2, #12]
 432:	4219      	tst	r1, r3
 434:	d0fc      	beq.n	430 <SystemInit+0x44>
 436:	2300      	movs	r3, #0
 438:	6711      	str	r1, [r2, #112]	; 0x70
 43a:	6751      	str	r1, [r2, #116]	; 0x74
 43c:	6753      	str	r3, [r2, #116]	; 0x74
 43e:	6751      	str	r1, [r2, #116]	; 0x74
 440:	2101      	movs	r1, #1
 442:	4a0b      	ldr	r2, [pc, #44]	; (470 <SystemInit+0x84>)
 444:	6f53      	ldr	r3, [r2, #116]	; 0x74
 446:	4219      	tst	r1, r3
 448:	d0fc      	beq.n	444 <SystemInit+0x58>
 44a:	238e      	movs	r3, #142	; 0x8e
 44c:	2080      	movs	r0, #128	; 0x80
 44e:	009b      	lsls	r3, r3, #2
 450:	58d4      	ldr	r4, [r2, r3]
 452:	00c0      	lsls	r0, r0, #3
 454:	4320      	orrs	r0, r4
 456:	50d0      	str	r0, [r2, r3]
 458:	2080      	movs	r0, #128	; 0x80
 45a:	58d4      	ldr	r4, [r2, r3]
 45c:	0040      	lsls	r0, r0, #1
 45e:	4320      	orrs	r0, r4
 460:	50d0      	str	r0, [r2, r3]
 462:	6791      	str	r1, [r2, #120]	; 0x78
 464:	3bb9      	subs	r3, #185	; 0xb9
 466:	4903      	ldr	r1, [pc, #12]	; (474 <SystemInit+0x88>)
 468:	3bff      	subs	r3, #255	; 0xff
 46a:	50d1      	str	r1, [r2, r3]
 46c:	bd10      	pop	{r4, pc}
 46e:	46c0      	nop			; (mov r8, r8)
 470:	40048000 	.word	0x40048000
 474:	0001005f 	.word	0x0001005f

00000478 <CAN_MakeBMSHeartbeat>:
#include "can_utils.h"
#include "ccand_11xx.h"

void CAN_MakeBMSHeartbeat(BMS_HEARTBEAT_T * bms_heartbeat, CCAN_MSG_OBJ_T * msg_obj) {
	//TODO
}
 478:	4770      	bx	lr
 47a:	46c0      	nop			; (mov r8, r8)

0000047c <CAN_error>:
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 47c:	2201      	movs	r2, #1
	can_error_info = error_info;
 47e:	4b02      	ldr	r3, [pc, #8]	; (488 <CAN_error+0xc>)
 480:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 482:	4b02      	ldr	r3, [pc, #8]	; (48c <CAN_error+0x10>)
 484:	701a      	strb	r2, [r3, #0]
}
 486:	4770      	bx	lr
 488:	1000010c 	.word	0x1000010c
 48c:	10000108 	.word	0x10000108

00000490 <CAN_rx>:
void CAN_rx(uint8_t msg_obj_num) {
 490:	b510      	push	{r4, lr}
	msg_obj.msgobj = msg_obj_num;
 492:	4c06      	ldr	r4, [pc, #24]	; (4ac <CAN_rx+0x1c>)
	LPC_CCAN_API->can_receive(&msg_obj);
 494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <CAN_rx+0x20>)
	msg_obj.msgobj = msg_obj_num;
 496:	7460      	strb	r0, [r4, #17]
	LPC_CCAN_API->can_receive(&msg_obj);
 498:	681b      	ldr	r3, [r3, #0]
 49a:	0020      	movs	r0, r4
 49c:	689b      	ldr	r3, [r3, #8]
 49e:	68db      	ldr	r3, [r3, #12]
 4a0:	4798      	blx	r3
	RingBuffer_Insert(&rx_buffer, &msg_obj);
 4a2:	0021      	movs	r1, r4
 4a4:	4803      	ldr	r0, [pc, #12]	; (4b4 <CAN_rx+0x24>)
 4a6:	f7ff fe7d 	bl	1a4 <RingBuffer_Insert>
}
 4aa:	bd10      	pop	{r4, pc}
 4ac:	100002f0 	.word	0x100002f0
 4b0:	1fff1ff8 	.word	0x1fff1ff8
 4b4:	10000110 	.word	0x10000110

000004b8 <CAN_tx>:
    if(!RingBuffer_IsEmpty(&tx_buffer)) {
 4b8:	4808      	ldr	r0, [pc, #32]	; (4dc <CAN_tx+0x24>)
void CAN_tx(uint8_t msg_obj_num) {
 4ba:	b510      	push	{r4, lr}
    if(!RingBuffer_IsEmpty(&tx_buffer)) {
 4bc:	68c3      	ldr	r3, [r0, #12]
 4be:	6902      	ldr	r2, [r0, #16]
 4c0:	4293      	cmp	r3, r2
 4c2:	d009      	beq.n	4d8 <CAN_tx+0x20>
		RingBuffer_Pop(&tx_buffer, &msg_obj);
 4c4:	4c06      	ldr	r4, [pc, #24]	; (4e0 <CAN_tx+0x28>)
 4c6:	0021      	movs	r1, r4
 4c8:	f7ff fe86 	bl	1d8 <RingBuffer_Pop>
        LPC_CCAN_API->can_transmit(&msg_obj);
 4cc:	4b05      	ldr	r3, [pc, #20]	; (4e4 <CAN_tx+0x2c>)
 4ce:	0020      	movs	r0, r4
 4d0:	681b      	ldr	r3, [r3, #0]
 4d2:	689b      	ldr	r3, [r3, #8]
 4d4:	691b      	ldr	r3, [r3, #16]
 4d6:	4798      	blx	r3
}
 4d8:	bd10      	pop	{r4, pc}
 4da:	46c0      	nop			; (mov r8, r8)
 4dc:	10000124 	.word	0x10000124
 4e0:	100002f0 	.word	0x100002f0
 4e4:	1fff1ff8 	.word	0x1fff1ff8

000004e8 <Baudrate_Calculate>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 4e8:	2280      	movs	r2, #128	; 0x80
 4ea:	2380      	movs	r3, #128	; 0x80
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
 4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 4ee:	46c6      	mov	lr, r8
 4f0:	0005      	movs	r5, r0
 4f2:	000c      	movs	r4, r1
 4f4:	4920      	ldr	r1, [pc, #128]	; (578 <Baudrate_Calculate+0x90>)
 4f6:	029b      	lsls	r3, r3, #10
 4f8:	5888      	ldr	r0, [r1, r2]
 4fa:	b500      	push	{lr}
 4fc:	4303      	orrs	r3, r0
 4fe:	508b      	str	r3, [r1, r2]
	pClk = Chip_Clock_GetMainClockRate();
 500:	f7ff fdfc 	bl	fc <Chip_Clock_GetMainClockRate>
	clk_per_bit = pClk / baud_rate;
 504:	0029      	movs	r1, r5
 506:	f000 f8bb 	bl	680 <__udivsi3>
	for (div = 0; div <= 15; div++) {
 50a:	2300      	movs	r3, #0
	clk_per_bit = pClk / baud_rate;
 50c:	2703      	movs	r7, #3
	for (div = 0; div <= 15; div++) {
 50e:	4698      	mov	r8, r3
 510:	2301      	movs	r3, #1
 512:	4443      	add	r3, r8
 514:	469c      	mov	ip, r3
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
 516:	003e      	movs	r6, r7
 518:	0019      	movs	r1, r3
 51a:	2501      	movs	r5, #1
 51c:	0032      	movs	r2, r6
 51e:	2303      	movs	r3, #3
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 520:	4290      	cmp	r0, r2
 522:	d00e      	beq.n	542 <Baudrate_Calculate+0x5a>
			for (segs = 3; segs <= 17; segs++) {
 524:	3301      	adds	r3, #1
 526:	1852      	adds	r2, r2, r1
 528:	2b12      	cmp	r3, #18
 52a:	d1f9      	bne.n	520 <Baudrate_Calculate+0x38>
		for (quanta = 1; quanta <= 32; quanta++) {
 52c:	3501      	adds	r5, #1
 52e:	4461      	add	r1, ip
 530:	19f6      	adds	r6, r6, r7
 532:	2d21      	cmp	r5, #33	; 0x21
 534:	d1f2      	bne.n	51c <Baudrate_Calculate+0x34>
	for (div = 0; div <= 15; div++) {
 536:	4663      	mov	r3, ip
 538:	3703      	adds	r7, #3
 53a:	2b10      	cmp	r3, #16
 53c:	d017      	beq.n	56e <Baudrate_Calculate+0x86>
 53e:	46e0      	mov	r8, ip
 540:	e7e6      	b.n	510 <Baudrate_Calculate+0x28>
					can_api_timing_cfg[0] = div;
 542:	4642      	mov	r2, r8
					segs -= 3;
 544:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 546:	0859      	lsrs	r1, r3, #1
					can_api_timing_cfg[0] = div;
 548:	6022      	str	r2, [r4, #0]
					can_sjw = seg1 > 3 ? 3 : seg1;
 54a:	000a      	movs	r2, r1
 54c:	2903      	cmp	r1, #3
 54e:	d811      	bhi.n	574 <Baudrate_Calculate+0x8c>
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 550:	26f0      	movs	r6, #240	; 0xf0
 552:	0208      	lsls	r0, r1, #8
					seg2 = segs - seg1;
 554:	1a5b      	subs	r3, r3, r1
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 556:	21e0      	movs	r1, #224	; 0xe0
 558:	0136      	lsls	r6, r6, #4
 55a:	0192      	lsls	r2, r2, #6
 55c:	4030      	ands	r0, r6
 55e:	4302      	orrs	r2, r0
 560:	3d01      	subs	r5, #1
 562:	031b      	lsls	r3, r3, #12
 564:	01c9      	lsls	r1, r1, #7
 566:	432a      	orrs	r2, r5
 568:	400b      	ands	r3, r1
 56a:	4313      	orrs	r3, r2
					can_api_timing_cfg[1] =
 56c:	6063      	str	r3, [r4, #4]
}
 56e:	bc04      	pop	{r2}
 570:	4690      	mov	r8, r2
 572:	bdf0      	pop	{r4, r5, r6, r7, pc}
					can_sjw = seg1 > 3 ? 3 : seg1;
 574:	2203      	movs	r2, #3
 576:	e7eb      	b.n	550 <Baudrate_Calculate+0x68>
 578:	40048000 	.word	0x40048000

0000057c <CAN_IRQHandler>:
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
 57c:	4b03      	ldr	r3, [pc, #12]	; (58c <CAN_IRQHandler+0x10>)
void CAN_IRQHandler(void) {
 57e:	b510      	push	{r4, lr}
	LPC_CCAN_API->isr();
 580:	681b      	ldr	r3, [r3, #0]
 582:	689b      	ldr	r3, [r3, #8]
 584:	685b      	ldr	r3, [r3, #4]
 586:	4798      	blx	r3
}
 588:	bd10      	pop	{r4, pc}
 58a:	46c0      	nop			; (mov r8, r8)
 58c:	1fff1ff8 	.word	0x1fff1ff8

00000590 <CAN_Init>:

void CAN_Init(uint32_t baud_rate) {
 590:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 592:	2400      	movs	r4, #0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
 594:	4d20      	ldr	r5, [pc, #128]	; (618 <CAN_Init+0x88>)
void CAN_Init(uint32_t baud_rate) {
 596:	b08b      	sub	sp, #44	; 0x2c
 598:	0006      	movs	r6, r0
	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
 59a:	2308      	movs	r3, #8
 59c:	2218      	movs	r2, #24
 59e:	491f      	ldr	r1, [pc, #124]	; (61c <CAN_Init+0x8c>)
 5a0:	0028      	movs	r0, r5
 5a2:	f7ff fdf7 	bl	194 <RingBuffer_Init>
 5a6:	612c      	str	r4, [r5, #16]
 5a8:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&rx_buffer);

	RingBuffer_Init(&tx_buffer, _tx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
 5aa:	4d1d      	ldr	r5, [pc, #116]	; (620 <CAN_Init+0x90>)
 5ac:	491d      	ldr	r1, [pc, #116]	; (624 <CAN_Init+0x94>)
 5ae:	2308      	movs	r3, #8
 5b0:	2218      	movs	r2, #24
 5b2:	0028      	movs	r0, r5
 5b4:	f7ff fdee 	bl	194 <RingBuffer_Init>
 5b8:	612c      	str	r4, [r5, #16]
 5ba:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&tx_buffer);

	uint32_t CanApiClkInitTable[2];
	CCAN_CALLBACKS_T callbacks = {
 5bc:	ad02      	add	r5, sp, #8
 5be:	002a      	movs	r2, r5
 5c0:	4b19      	ldr	r3, [pc, #100]	; (628 <CAN_Init+0x98>)
 5c2:	cb83      	ldmia	r3!, {r0, r1, r7}
 5c4:	c283      	stmia	r2!, {r0, r1, r7}
 5c6:	cb83      	ldmia	r3!, {r0, r1, r7}
 5c8:	c283      	stmia	r2!, {r0, r1, r7}
 5ca:	cb03      	ldmia	r3!, {r0, r1}
 5cc:	c203      	stmia	r2!, {r0, r1}
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
 5ce:	0030      	movs	r0, r6

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
 5d0:	4e16      	ldr	r6, [pc, #88]	; (62c <CAN_Init+0x9c>)
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
 5d2:	4669      	mov	r1, sp
 5d4:	f7ff ff88 	bl	4e8 <Baudrate_Calculate>
	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
 5d8:	6833      	ldr	r3, [r6, #0]
 5da:	2101      	movs	r1, #1
 5dc:	689b      	ldr	r3, [r3, #8]
 5de:	4668      	mov	r0, sp
 5e0:	681b      	ldr	r3, [r3, #0]
 5e2:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 5e4:	6833      	ldr	r3, [r6, #0]
 5e6:	0028      	movs	r0, r5
 5e8:	689b      	ldr	r3, [r3, #8]
 5ea:	69db      	ldr	r3, [r3, #28]
 5ec:	4798      	blx	r3
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 5ee:	2280      	movs	r2, #128	; 0x80
 5f0:	4b0f      	ldr	r3, [pc, #60]	; (630 <CAN_Init+0xa0>)
 5f2:	0192      	lsls	r2, r2, #6
 5f4:	601a      	str	r2, [r3, #0]
	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);

	/* Configure message object 1 to only ID 0x600 */
	msg_obj.msgobj = 1;
 5f6:	2301      	movs	r3, #1
 5f8:	480e      	ldr	r0, [pc, #56]	; (634 <CAN_Init+0xa4>)
 5fa:	7443      	strb	r3, [r0, #17]
	msg_obj.mode_id = 0xFFF;
 5fc:	4b0e      	ldr	r3, [pc, #56]	; (638 <CAN_Init+0xa8>)
    // ANDs the mask with the input ID and checks if == to mode_id
	msg_obj.mask = 0x000; 
 5fe:	6044      	str	r4, [r0, #4]
	msg_obj.mode_id = 0xFFF;
 600:	6003      	str	r3, [r0, #0]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 602:	6833      	ldr	r3, [r6, #0]
 604:	689b      	ldr	r3, [r3, #8]
 606:	689b      	ldr	r3, [r3, #8]
 608:	4798      	blx	r3

	can_error_flag = false;
 60a:	4b0c      	ldr	r3, [pc, #48]	; (63c <CAN_Init+0xac>)
 60c:	701c      	strb	r4, [r3, #0]
	can_error_info = 0;
 60e:	4b0c      	ldr	r3, [pc, #48]	; (640 <CAN_Init+0xb0>)
 610:	601c      	str	r4, [r3, #0]
}
 612:	b00b      	add	sp, #44	; 0x2c
 614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 616:	46c0      	nop			; (mov r8, r8)
 618:	10000110 	.word	0x10000110
 61c:	10000230 	.word	0x10000230
 620:	10000124 	.word	0x10000124
 624:	10000170 	.word	0x10000170
 628:	000008e4 	.word	0x000008e4
 62c:	1fff1ff8 	.word	0x1fff1ff8
 630:	e000e100 	.word	0xe000e100
 634:	100002f0 	.word	0x100002f0
 638:	00000fff 	.word	0x00000fff
 63c:	10000108 	.word	0x10000108
 640:	1000010c 	.word	0x1000010c

00000644 <CAN_Receive>:

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
 644:	4b0b      	ldr	r3, [pc, #44]	; (674 <CAN_Receive+0x30>)
CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
 646:	b510      	push	{r4, lr}
	if (can_error_flag) {
 648:	781a      	ldrb	r2, [r3, #0]
 64a:	2a00      	cmp	r2, #0
 64c:	d10d      	bne.n	66a <CAN_Receive+0x26>
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else {
		if (!RingBuffer_IsEmpty(&rx_buffer)) {
 64e:	4a0a      	ldr	r2, [pc, #40]	; (678 <CAN_Receive+0x34>)
			RingBuffer_Pop(&rx_buffer, user_buffer);
            return NO_CAN_ERROR;
		} else {
            return NO_RX_CAN_MESSAGE;
 650:	2301      	movs	r3, #1
		if (!RingBuffer_IsEmpty(&rx_buffer)) {
 652:	68d1      	ldr	r1, [r2, #12]
 654:	468c      	mov	ip, r1
 656:	6911      	ldr	r1, [r2, #16]
 658:	458c      	cmp	ip, r1
 65a:	d004      	beq.n	666 <CAN_Receive+0x22>
			RingBuffer_Pop(&rx_buffer, user_buffer);
 65c:	0001      	movs	r1, r0
 65e:	0010      	movs	r0, r2
 660:	f7ff fdba 	bl	1d8 <RingBuffer_Pop>
            return NO_CAN_ERROR;
 664:	2300      	movs	r3, #0
        }
	}
}
 666:	0018      	movs	r0, r3
 668:	bd10      	pop	{r4, pc}
		can_error_flag = false;
 66a:	2200      	movs	r2, #0
 66c:	701a      	strb	r2, [r3, #0]
    return can_error;
 66e:	4b03      	ldr	r3, [pc, #12]	; (67c <CAN_Receive+0x38>)
 670:	781b      	ldrb	r3, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
 672:	e7f8      	b.n	666 <CAN_Receive+0x22>
 674:	10000108 	.word	0x10000108
 678:	10000110 	.word	0x10000110
 67c:	1000010c 	.word	0x1000010c

00000680 <__udivsi3>:
 680:	2200      	movs	r2, #0
 682:	0843      	lsrs	r3, r0, #1
 684:	428b      	cmp	r3, r1
 686:	d374      	bcc.n	772 <__udivsi3+0xf2>
 688:	0903      	lsrs	r3, r0, #4
 68a:	428b      	cmp	r3, r1
 68c:	d35f      	bcc.n	74e <__udivsi3+0xce>
 68e:	0a03      	lsrs	r3, r0, #8
 690:	428b      	cmp	r3, r1
 692:	d344      	bcc.n	71e <__udivsi3+0x9e>
 694:	0b03      	lsrs	r3, r0, #12
 696:	428b      	cmp	r3, r1
 698:	d328      	bcc.n	6ec <__udivsi3+0x6c>
 69a:	0c03      	lsrs	r3, r0, #16
 69c:	428b      	cmp	r3, r1
 69e:	d30d      	bcc.n	6bc <__udivsi3+0x3c>
 6a0:	22ff      	movs	r2, #255	; 0xff
 6a2:	0209      	lsls	r1, r1, #8
 6a4:	ba12      	rev	r2, r2
 6a6:	0c03      	lsrs	r3, r0, #16
 6a8:	428b      	cmp	r3, r1
 6aa:	d302      	bcc.n	6b2 <__udivsi3+0x32>
 6ac:	1212      	asrs	r2, r2, #8
 6ae:	0209      	lsls	r1, r1, #8
 6b0:	d065      	beq.n	77e <__udivsi3+0xfe>
 6b2:	0b03      	lsrs	r3, r0, #12
 6b4:	428b      	cmp	r3, r1
 6b6:	d319      	bcc.n	6ec <__udivsi3+0x6c>
 6b8:	e000      	b.n	6bc <__udivsi3+0x3c>
 6ba:	0a09      	lsrs	r1, r1, #8
 6bc:	0bc3      	lsrs	r3, r0, #15
 6be:	428b      	cmp	r3, r1
 6c0:	d301      	bcc.n	6c6 <__udivsi3+0x46>
 6c2:	03cb      	lsls	r3, r1, #15
 6c4:	1ac0      	subs	r0, r0, r3
 6c6:	4152      	adcs	r2, r2
 6c8:	0b83      	lsrs	r3, r0, #14
 6ca:	428b      	cmp	r3, r1
 6cc:	d301      	bcc.n	6d2 <__udivsi3+0x52>
 6ce:	038b      	lsls	r3, r1, #14
 6d0:	1ac0      	subs	r0, r0, r3
 6d2:	4152      	adcs	r2, r2
 6d4:	0b43      	lsrs	r3, r0, #13
 6d6:	428b      	cmp	r3, r1
 6d8:	d301      	bcc.n	6de <__udivsi3+0x5e>
 6da:	034b      	lsls	r3, r1, #13
 6dc:	1ac0      	subs	r0, r0, r3
 6de:	4152      	adcs	r2, r2
 6e0:	0b03      	lsrs	r3, r0, #12
 6e2:	428b      	cmp	r3, r1
 6e4:	d301      	bcc.n	6ea <__udivsi3+0x6a>
 6e6:	030b      	lsls	r3, r1, #12
 6e8:	1ac0      	subs	r0, r0, r3
 6ea:	4152      	adcs	r2, r2
 6ec:	0ac3      	lsrs	r3, r0, #11
 6ee:	428b      	cmp	r3, r1
 6f0:	d301      	bcc.n	6f6 <__udivsi3+0x76>
 6f2:	02cb      	lsls	r3, r1, #11
 6f4:	1ac0      	subs	r0, r0, r3
 6f6:	4152      	adcs	r2, r2
 6f8:	0a83      	lsrs	r3, r0, #10
 6fa:	428b      	cmp	r3, r1
 6fc:	d301      	bcc.n	702 <__udivsi3+0x82>
 6fe:	028b      	lsls	r3, r1, #10
 700:	1ac0      	subs	r0, r0, r3
 702:	4152      	adcs	r2, r2
 704:	0a43      	lsrs	r3, r0, #9
 706:	428b      	cmp	r3, r1
 708:	d301      	bcc.n	70e <__udivsi3+0x8e>
 70a:	024b      	lsls	r3, r1, #9
 70c:	1ac0      	subs	r0, r0, r3
 70e:	4152      	adcs	r2, r2
 710:	0a03      	lsrs	r3, r0, #8
 712:	428b      	cmp	r3, r1
 714:	d301      	bcc.n	71a <__udivsi3+0x9a>
 716:	020b      	lsls	r3, r1, #8
 718:	1ac0      	subs	r0, r0, r3
 71a:	4152      	adcs	r2, r2
 71c:	d2cd      	bcs.n	6ba <__udivsi3+0x3a>
 71e:	09c3      	lsrs	r3, r0, #7
 720:	428b      	cmp	r3, r1
 722:	d301      	bcc.n	728 <__udivsi3+0xa8>
 724:	01cb      	lsls	r3, r1, #7
 726:	1ac0      	subs	r0, r0, r3
 728:	4152      	adcs	r2, r2
 72a:	0983      	lsrs	r3, r0, #6
 72c:	428b      	cmp	r3, r1
 72e:	d301      	bcc.n	734 <__udivsi3+0xb4>
 730:	018b      	lsls	r3, r1, #6
 732:	1ac0      	subs	r0, r0, r3
 734:	4152      	adcs	r2, r2
 736:	0943      	lsrs	r3, r0, #5
 738:	428b      	cmp	r3, r1
 73a:	d301      	bcc.n	740 <__udivsi3+0xc0>
 73c:	014b      	lsls	r3, r1, #5
 73e:	1ac0      	subs	r0, r0, r3
 740:	4152      	adcs	r2, r2
 742:	0903      	lsrs	r3, r0, #4
 744:	428b      	cmp	r3, r1
 746:	d301      	bcc.n	74c <__udivsi3+0xcc>
 748:	010b      	lsls	r3, r1, #4
 74a:	1ac0      	subs	r0, r0, r3
 74c:	4152      	adcs	r2, r2
 74e:	08c3      	lsrs	r3, r0, #3
 750:	428b      	cmp	r3, r1
 752:	d301      	bcc.n	758 <__udivsi3+0xd8>
 754:	00cb      	lsls	r3, r1, #3
 756:	1ac0      	subs	r0, r0, r3
 758:	4152      	adcs	r2, r2
 75a:	0883      	lsrs	r3, r0, #2
 75c:	428b      	cmp	r3, r1
 75e:	d301      	bcc.n	764 <__udivsi3+0xe4>
 760:	008b      	lsls	r3, r1, #2
 762:	1ac0      	subs	r0, r0, r3
 764:	4152      	adcs	r2, r2
 766:	0843      	lsrs	r3, r0, #1
 768:	428b      	cmp	r3, r1
 76a:	d301      	bcc.n	770 <__udivsi3+0xf0>
 76c:	004b      	lsls	r3, r1, #1
 76e:	1ac0      	subs	r0, r0, r3
 770:	4152      	adcs	r2, r2
 772:	1a41      	subs	r1, r0, r1
 774:	d200      	bcs.n	778 <__udivsi3+0xf8>
 776:	4601      	mov	r1, r0
 778:	4152      	adcs	r2, r2
 77a:	4610      	mov	r0, r2
 77c:	4770      	bx	lr
 77e:	e7ff      	b.n	780 <__udivsi3+0x100>
 780:	b501      	push	{r0, lr}
 782:	2000      	movs	r0, #0
 784:	f000 f806 	bl	794 <__aeabi_idiv0>
 788:	bd02      	pop	{r1, pc}
 78a:	46c0      	nop			; (mov r8, r8)

0000078c <__aeabi_uidivmod>:
 78c:	2900      	cmp	r1, #0
 78e:	d0f7      	beq.n	780 <__udivsi3+0x100>
 790:	e776      	b.n	680 <__udivsi3>
 792:	4770      	bx	lr

00000794 <__aeabi_idiv0>:
 794:	4770      	bx	lr
 796:	46c0      	nop			; (mov r8, r8)

00000798 <memcpy>:
 798:	b5f0      	push	{r4, r5, r6, r7, lr}
 79a:	0005      	movs	r5, r0
 79c:	2a0f      	cmp	r2, #15
 79e:	d92f      	bls.n	800 <memcpy+0x68>
 7a0:	000b      	movs	r3, r1
 7a2:	4303      	orrs	r3, r0
 7a4:	079b      	lsls	r3, r3, #30
 7a6:	d134      	bne.n	812 <memcpy+0x7a>
 7a8:	0016      	movs	r6, r2
 7aa:	000c      	movs	r4, r1
 7ac:	0003      	movs	r3, r0
 7ae:	3e10      	subs	r6, #16
 7b0:	0935      	lsrs	r5, r6, #4
 7b2:	3501      	adds	r5, #1
 7b4:	012d      	lsls	r5, r5, #4
 7b6:	1945      	adds	r5, r0, r5
 7b8:	6827      	ldr	r7, [r4, #0]
 7ba:	601f      	str	r7, [r3, #0]
 7bc:	6867      	ldr	r7, [r4, #4]
 7be:	605f      	str	r7, [r3, #4]
 7c0:	68a7      	ldr	r7, [r4, #8]
 7c2:	609f      	str	r7, [r3, #8]
 7c4:	68e7      	ldr	r7, [r4, #12]
 7c6:	3410      	adds	r4, #16
 7c8:	60df      	str	r7, [r3, #12]
 7ca:	3310      	adds	r3, #16
 7cc:	429d      	cmp	r5, r3
 7ce:	d1f3      	bne.n	7b8 <memcpy+0x20>
 7d0:	230f      	movs	r3, #15
 7d2:	439e      	bics	r6, r3
 7d4:	3610      	adds	r6, #16
 7d6:	1985      	adds	r5, r0, r6
 7d8:	1989      	adds	r1, r1, r6
 7da:	4013      	ands	r3, r2
 7dc:	2b03      	cmp	r3, #3
 7de:	d91a      	bls.n	816 <memcpy+0x7e>
 7e0:	1f1e      	subs	r6, r3, #4
 7e2:	2300      	movs	r3, #0
 7e4:	08b4      	lsrs	r4, r6, #2
 7e6:	3401      	adds	r4, #1
 7e8:	00a4      	lsls	r4, r4, #2
 7ea:	58cf      	ldr	r7, [r1, r3]
 7ec:	50ef      	str	r7, [r5, r3]
 7ee:	3304      	adds	r3, #4
 7f0:	42a3      	cmp	r3, r4
 7f2:	d1fa      	bne.n	7ea <memcpy+0x52>
 7f4:	2403      	movs	r4, #3
 7f6:	43a6      	bics	r6, r4
 7f8:	1d33      	adds	r3, r6, #4
 7fa:	4022      	ands	r2, r4
 7fc:	18c9      	adds	r1, r1, r3
 7fe:	18ed      	adds	r5, r5, r3
 800:	2a00      	cmp	r2, #0
 802:	d005      	beq.n	810 <memcpy+0x78>
 804:	2300      	movs	r3, #0
 806:	5ccc      	ldrb	r4, [r1, r3]
 808:	54ec      	strb	r4, [r5, r3]
 80a:	3301      	adds	r3, #1
 80c:	4293      	cmp	r3, r2
 80e:	d1fa      	bne.n	806 <memcpy+0x6e>
 810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 812:	0005      	movs	r5, r0
 814:	e7f6      	b.n	804 <memcpy+0x6c>
 816:	001a      	movs	r2, r3
 818:	e7f2      	b.n	800 <memcpy+0x68>
 81a:	46c0      	nop			; (mov r8, r8)

0000081c <wdtOSCRate>:
 81c:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
 82c:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
 83c:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
 84c:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.

0000085c <OscRateIn>:
 85c:	1b00 00b7 7453 7261 6574 2064 7075 0d0a     ....Started up..
 86c:	0000 0000 4d42 2053 6548 7261 6274 6165     ....BMS Heartbea
 87c:	0d74 000a 4d42 2053 6944 6373 6168 6772     t...BMS Discharg
 88c:	2065 6552 7073 6e6f 6573 0a0d 0000 0000     e Response......
 89c:	4d42 2053 6150 6b63 5320 6174 7574 0073     BMS Pack Status.
 8ac:	4d42 2053 6543 6c6c 5420 6d65 7370 0000     BMS Cell Temps..
 8bc:	4d42 2053 7245 6f72 7372 0000 6e55 6572     BMS Errors..Unre
 8cc:	6f63 6e67 7a69 6465 4320 4e41 6d20 7365     cognized CAN mes
 8dc:	6173 6567 0000 0000 0491 0000 04b9 0000     sage............
 8ec:	047d 0000 0000 0000 0000 0000 0000 0000     }...............
	...
